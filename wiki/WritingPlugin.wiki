#summary Writing a plugin
#labels Phase-Implementation

Writing a plugin is practically the same as adding support for a site (see AddingSite).

Currently plugins can only implement the same functionality as normal site modules. We are planning on adding support for other types of plugin in future.

To develop and test your plugin, we recommend using a check-out of our Subversion repository. You could use the 'standalone' script, but this makes it harder to figure out why your plugin doesn't compile.

Place your plugin (called say 'Channel4.pm' for `FlashVideo::Site::Channel4`) in your personal get_flash_videos plugins directory. On Linux and other Unix-like operating systems, this in `~/.get_flash_videos/plugins`. On Windows, this is in `get_flash_videos/plugins` in your 'application data' directory. Then run get_flash_videos with the `--debug` option. When it starts, it should show output like:

{{{
  2 plugins installed:
  - Test.pm
  - Foo.pm
}}}

If you don't see your plugin listed here, make sure you've copied it into the correct location. You can see where get_flash_videos is looking for plugins by looking further into the debug output:

{{{
  Trying to open plugin /home/zak/.get_flash_videos/plugins/Brightcove.pm
}}}

If get_flash_videos doesn't use your plugin for downloading the video you've specified, check that the package name matches part of the hostname. (For example, 'channel4' matches 'Channel4'.) If your plugin supports several different hosts, or supports embedded videos which use a particular kind of player, define a `can_handle` method. If get_flash_videos still doesn't use your plugin for downloading the video you've specified, check that your code compiles. The easiest way of doing this is by running, from your get_flash_videos SVN checkout directory:

{{{
  perl -c ~/.get_flash_videos/plugins/Plugin.pm
}}}

(If you're in your get_flash_videos SVN checkout directory, you don't need to alter Perl's search path to find get_flash_videos' modules.)

Once you've written your site module, you can add support for get_flash_videos updating it automatically when a user supplies the `--update` option. Updating plugins works in a very simple way. Simply define `@update_urls` at package level, specifying a list of URLs for your plugin:

{{{
  our @update_urls = (
	'http://somesite.com/code/PluginFile.pm'
  );
}}}

Whether you need multiple URLs or not depends on the nature of your plugin and where you're hosting it. If you think there's a chance that your plugin might be taken off whatever site you're hosting it on, or the site has poor reliability, you can define multiple URLs. If you do this though, be sure to keep the different files in sync. get_flash_videos determines whether it needs to update your plugin by comparing the plugin's modification time on disk with the Last-Modified-Date that the server returns in response to a HEAD request. Some code hosting sites set this to the date and time of your last commit, which is handy.

If this kind of updating isn't flexible enough for your plugin, you can define your own `update` method. In this case, the `@update_urls` array is ignored. In this situation, you'll need to call `install_plugin` method to actually update the plugin on disk.
