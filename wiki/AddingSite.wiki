#summary Adding support for a site
#labels Phase-Implementation

Support for a site is added by creating the relevant `FlashVideo::Site::` module.

The name is important, because get_flash_videos searches through the parts of the
hostname in the given URL to download to find the module.

For example given: 'http://www.example.com/video/1234' it will search for:

  * FlashVideo::Site::Www
  * FlashVideo::Site::Example
  * FlashVideo::Site::Com

(The first letter is capitalised as is the convention for Perl modules, the rest is lowercase.)

In this case the best match will be achieved by using
`FlashVideo::Site::Example`. So for this example we'll create that. You can do
the following even with the combined version, as get_flash_videos will still
attempt to load the modules from disk:

{{{
 mkdir -p FlashVideo/Site
 $EDITOR FlashVideo/Site/Example.pm
}}}

Now in Example.pm put something like this:

{{{
# Part of get-flash-videos. See get_flash_videos for copyright.
package FlashVideo::Site::Videolectures;

use strict;
use FlashVideo::Utils;

sub find_video {
  my ($self, $browser, $embed_url) = @_;

  ... code here ...

  return $url, $filename;
}

1;

}}}

As you can see this consists of a module with one subroutine 'find_video' which
will be called when a video needs downloading.

When find_video is called you can rely on on `WWW::Mechanize` object `$browser`
being at the page the user provided on the command line, so matching on
`$browser->content` needs nothing special. `$embed_url` will normally be the same
as the page, but in the case of embedded content it may differ (see the
Brightcove support for example).

The subroutine should return the url where the FLV video can be found (or for
RTMP a hash reference describing the parameters to rtmpdump), as well as a
filename to use (this should ideally be something descriptive, not necessarily
the filename used by the video site).

Going back to the example, say that the site embedded a file in the page, like
so: `file: 'some-video'`.

It would be possible to parse out the filename with some code like the
following:

{{{
   # Grab the file from the page..
   my $file = ($browser->content =~ /file:\s*'([^']+)'/)[0];
   die "Unable to extract file" unless $file;

   # Construct the full URL based on the path..
   my $url = URI->new_abs($file, $browser->uri);
}}}

Now we have the URL, next is getting a sensible filename for it, we'll just use
the title of the HTML page for that..

{{{
  my $filename;
  if ($browser->content =~ /<title>(.*?)<\//) {
    $filename = title_to_filename($1);
  }
  $filename ||= get_video_filename();
}}}

(`title_to_filename` and `get_video_filename` are methods provided by `FlashVideo::Utils`.)

That is all there is to creating a site module, except obviously working out
what the site actually does. Firebug, Wireshark, etc are useful here.